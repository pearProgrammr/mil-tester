-----------------------------------------
-- not recursive
entrypoint bitBit2 :: [Word] >>= [Word]
bitBit2[t0] =
  shl((1, t0))

-----------------------------------------
-- not recursive
entrypoint bitBit12 :: [Word] >>= [Word]
bitBit12[t0] =
  shl((1, t0))

-----------------------------------------
-- not recursive
b6 :: [Word] >>= [Word, Word]
b6[t0] =
  t1 <- add((t0, -32))
  t2 <- shl((1, t1))
  return [0, t2]

-----------------------------------------
-- not recursive
b5 :: [Word] >>= [Word, Word]
b5[t0] =
  t1 <- shl((1, t0))
  return [t1, 0]

-----------------------------------------
-- not recursive
entrypoint bitBit48 :: [Word] >>= [Word, Word]
bitBit48[t0] =
  t1 <- primUlt((t0, 32))
  if t1
    then b5[t0]
    else b6[t0]

-----------------------------------------
-- not recursive
entrypoint bitBit64 :: [Word] >>= [Word, Word]
bitBit64[t0] =
  t1 <- primUlt((t0, 32))
  if t1
    then b5[t0]
    else b6[t0]

-----------------------------------------
-- not recursive
b15 :: [Word] >>= [Word, Word, Word, Word]
b15[t0] =
  t1 <- add((t0, -96))
  t2 <- shl((1, t1))
  return [0, 0, 0, t2]

-----------------------------------------
-- not recursive
b14 :: [Word] >>= [Word, Word, Word, Word]
b14[t0] =
  t1 <- add((t0, -64))
  t2 <- shl((1, t1))
  return [0, 0, t2, 0]

-----------------------------------------
-- not recursive
b16 :: [Word] >>= [Word, Word, Word, Word]
b16[t0] =
  t1 <- primUlt((t0, 96))
  if t1
    then b14[t0]
    else b15[t0]

-----------------------------------------
-- not recursive
b12 :: [Word] >>= [Word, Word, Word, Word]
b12[t0] =
  t1 <- add((t0, -32))
  t2 <- shl((1, t1))
  return [0, t2, 0, 0]

-----------------------------------------
-- not recursive
b11 :: [Word] >>= [Word, Word, Word, Word]
b11[t0] =
  t1 <- shl((1, t0))
  return [t1, 0, 0, 0]

-----------------------------------------
-- not recursive
b13 :: [Word] >>= [Word, Word, Word, Word]
b13[t0] =
  t1 <- primUlt((t0, 32))
  if t1
    then b11[t0]
    else b12[t0]

-----------------------------------------
-- not recursive
entrypoint bitBit128 :: [Word] >>= [Word, Word, Word, Word]
bitBit128[t0] =
  t1 <- primUlt((t0, 64))
  if t1
    then b13[t0]
    else b16[t0]

-----------------------------------------
-- not recursive
entrypoint bitSetBit2 :: [Word, Word] >>= [Word]
bitSetBit2[t0, t1] =
  t2 <- shl((1, t1))
  or((t2, t0))

-----------------------------------------
-- not recursive
entrypoint bitSetBit12 :: [Word, Word] >>= [Word]
bitSetBit12[t0, t1] =
  t2 <- shl((1, t1))
  or((t2, t0))

-----------------------------------------
-- not recursive
b21 :: forall (a :: *). [a, Word, Word] >>= [a, Word]
b21[t0, t1, t2] =
  t3 <- add((t2, -32))
  t4 <- shl((1, t3))
  t5 <- or((t4, t1))
  return [t0, t5]

-----------------------------------------
-- not recursive
b20 :: forall (a :: *). [Word, a, Word] >>= [Word, a]
b20[t0, t1, t2] =
  t3 <- shl((1, t2))
  t4 <- or((t3, t0))
  return [t4, t1]

-----------------------------------------
-- not recursive
entrypoint bitSetBit48 :: [Word, Word, Word] >>= [Word, Word]
bitSetBit48[t0, t1, t2] =
  t3 <- primUlt((t2, 32))
  if t3
    then b20[t0, t1, t2]
    else b21[t0, t1, t2]

-----------------------------------------
-- not recursive
entrypoint bitSetBit64 :: [Word, Word, Word] >>= [Word, Word]
bitSetBit64[t0, t1, t2] =
  t3 <- primUlt((t2, 32))
  if t3
    then b20[t0, t1, t2]
    else b21[t0, t1, t2]

-----------------------------------------
-- not recursive
b30 :: forall (a :: *) (b :: *) (c :: *). [a, b, c, Word, Word] >>= [a, b, c, Word]
b30[t0, t1, t2, t3, t4] =
  t5 <- add((t4, -96))
  t6 <- shl((1, t5))
  t7 <- or((t6, t3))
  return [t0, t1, t2, t7]

-----------------------------------------
-- not recursive
b29 :: forall (a :: *) (b :: *) (c :: *). [a, b, Word, c, Word] >>= [a, b, Word, c]
b29[t0, t1, t2, t3, t4] =
  t5 <- add((t4, -64))
  t6 <- shl((1, t5))
  t7 <- or((t6, t2))
  return [t0, t1, t7, t3]

-----------------------------------------
-- not recursive
b31 :: forall (a :: *) (b :: *). [a, b, Word, Word, Word] >>= [a, b, Word, Word]
b31[t0, t1, t2, t3, t4] =
  t5 <- primUlt((t4, 96))
  if t5
    then b29[t0, t1, t2, t3, t4]
    else b30[t0, t1, t2, t3, t4]

-----------------------------------------
-- not recursive
b27 :: forall (a :: *) (b :: *) (c :: *). [a, Word, b, c, Word] >>= [a, Word, b, c]
b27[t0, t1, t2, t3, t4] =
  t5 <- add((t4, -32))
  t6 <- shl((1, t5))
  t7 <- or((t6, t1))
  return [t0, t7, t2, t3]

-----------------------------------------
-- not recursive
b26 :: forall (a :: *) (b :: *) (c :: *). [Word, a, b, c, Word] >>= [Word, a, b, c]
b26[t0, t1, t2, t3, t4] =
  t5 <- shl((1, t4))
  t6 <- or((t5, t0))
  return [t6, t1, t2, t3]

-----------------------------------------
-- not recursive
b28 :: forall (a :: *) (b :: *). [Word, Word, a, b, Word] >>= [Word, Word, a, b]
b28[t0, t1, t2, t3, t4] =
  t5 <- primUlt((t4, 32))
  if t5
    then b26[t0, t1, t2, t3, t4]
    else b27[t0, t1, t2, t3, t4]

-----------------------------------------
-- not recursive
entrypoint bitSetBit128 :: [Word, Word, Word, Word, Word] >>= [Word, Word, Word, Word]
bitSetBit128[t0, t1, t2, t3, t4] =
  t5 <- primUlt((t4, 64))
  if t5
    then b28[t0, t1, t2, t3, t4]
    else b31[t0, t1, t2, t3, t4]

-----------------------------------------
-- not recursive
entrypoint bitClearBit2 :: [Word, Word] >>= [Word]
bitClearBit2[t0, t1] =
  t2 <- shl((1, t1))
  t3 <- not((t2))
  and((t3, t0))

-----------------------------------------
-- not recursive
entrypoint bitClearBit12 :: [Word, Word] >>= [Word]
bitClearBit12[t0, t1] =
  t2 <- shl((1, t1))
  t3 <- not((t2))
  and((t3, t0))

-----------------------------------------
-- not recursive
b36 :: forall (a :: *). [a, Word, Word] >>= [a, Word]
b36[t0, t1, t2] =
  t3 <- add((t2, -32))
  t4 <- shl((1, t3))
  t5 <- not((t4))
  t6 <- and((t5, t1))
  return [t0, t6]

-----------------------------------------
-- not recursive
b35 :: forall (a :: *). [Word, a, Word] >>= [Word, a]
b35[t0, t1, t2] =
  t3 <- shl((1, t2))
  t4 <- not((t3))
  t5 <- and((t4, t0))
  return [t5, t1]

-----------------------------------------
-- not recursive
entrypoint bitClearBit48 :: [Word, Word, Word] >>= [Word, Word]
bitClearBit48[t0, t1, t2] =
  t3 <- primUlt((t2, 32))
  if t3
    then b35[t0, t1, t2]
    else b36[t0, t1, t2]

-----------------------------------------
-- not recursive
entrypoint bitClearBit64 :: [Word, Word, Word] >>= [Word, Word]
bitClearBit64[t0, t1, t2] =
  t3 <- primUlt((t2, 32))
  if t3
    then b35[t0, t1, t2]
    else b36[t0, t1, t2]

-----------------------------------------
-- not recursive
b45 :: forall (a :: *) (b :: *) (c :: *). [a, b, c, Word, Word] >>= [a, b, c, Word]
b45[t0, t1, t2, t3, t4] =
  t5 <- add((t4, -96))
  t6 <- shl((1, t5))
  t7 <- not((t6))
  t8 <- and((t7, t3))
  return [t0, t1, t2, t8]

-----------------------------------------
-- not recursive
b44 :: forall (a :: *) (b :: *) (c :: *). [a, b, Word, c, Word] >>= [a, b, Word, c]
b44[t0, t1, t2, t3, t4] =
  t5 <- add((t4, -64))
  t6 <- shl((1, t5))
  t7 <- not((t6))
  t8 <- and((t7, t2))
  return [t0, t1, t8, t3]

-----------------------------------------
-- not recursive
b46 :: forall (a :: *) (b :: *). [a, b, Word, Word, Word] >>= [a, b, Word, Word]
b46[t0, t1, t2, t3, t4] =
  t5 <- primUlt((t4, 96))
  if t5
    then b44[t0, t1, t2, t3, t4]
    else b45[t0, t1, t2, t3, t4]

-----------------------------------------
-- not recursive
b42 :: forall (a :: *) (b :: *) (c :: *). [a, Word, b, c, Word] >>= [a, Word, b, c]
b42[t0, t1, t2, t3, t4] =
  t5 <- add((t4, -32))
  t6 <- shl((1, t5))
  t7 <- not((t6))
  t8 <- and((t7, t1))
  return [t0, t8, t2, t3]

-----------------------------------------
-- not recursive
b41 :: forall (a :: *) (b :: *) (c :: *). [Word, a, b, c, Word] >>= [Word, a, b, c]
b41[t0, t1, t2, t3, t4] =
  t5 <- shl((1, t4))
  t6 <- not((t5))
  t7 <- and((t6, t0))
  return [t7, t1, t2, t3]

-----------------------------------------
-- not recursive
b43 :: forall (a :: *) (b :: *). [Word, Word, a, b, Word] >>= [Word, Word, a, b]
b43[t0, t1, t2, t3, t4] =
  t5 <- primUlt((t4, 32))
  if t5
    then b41[t0, t1, t2, t3, t4]
    else b42[t0, t1, t2, t3, t4]

-----------------------------------------
-- not recursive
entrypoint bitClearBit128 :: [Word, Word, Word, Word, Word] >>= [Word, Word, Word, Word]
bitClearBit128[t0, t1, t2, t3, t4] =
  t5 <- primUlt((t4, 64))
  if t5
    then b43[t0, t1, t2, t3, t4]
    else b46[t0, t1, t2, t3, t4]

-----------------------------------------
-- not recursive
entrypoint bitFlipBit2 :: [Word, Word] >>= [Word]
bitFlipBit2[t0, t1] =
  t2 <- shl((1, t1))
  xor((t2, t0))

-----------------------------------------
-- not recursive
entrypoint bitFlipBit12 :: [Word, Word] >>= [Word]
bitFlipBit12[t0, t1] =
  t2 <- shl((1, t1))
  xor((t2, t0))

-----------------------------------------
-- not recursive
b51 :: forall (a :: *). [a, Word, Word] >>= [a, Word]
b51[t0, t1, t2] =
  t3 <- add((t2, -32))
  t4 <- shl((1, t3))
  t5 <- xor((t4, t1))
  return [t0, t5]

-----------------------------------------
-- not recursive
b50 :: forall (a :: *). [Word, a, Word] >>= [Word, a]
b50[t0, t1, t2] =
  t3 <- shl((1, t2))
  t4 <- xor((t3, t0))
  return [t4, t1]

-----------------------------------------
-- not recursive
entrypoint bitFlipBit48 :: [Word, Word, Word] >>= [Word, Word]
bitFlipBit48[t0, t1, t2] =
  t3 <- primUlt((t2, 32))
  if t3
    then b50[t0, t1, t2]
    else b51[t0, t1, t2]

-----------------------------------------
-- not recursive
entrypoint bitFlipBit64 :: [Word, Word, Word] >>= [Word, Word]
bitFlipBit64[t0, t1, t2] =
  t3 <- primUlt((t2, 32))
  if t3
    then b50[t0, t1, t2]
    else b51[t0, t1, t2]

-----------------------------------------
-- not recursive
b60 :: forall (a :: *) (b :: *) (c :: *). [a, b, c, Word, Word] >>= [a, b, c, Word]
b60[t0, t1, t2, t3, t4] =
  t5 <- add((t4, -96))
  t6 <- shl((1, t5))
  t7 <- xor((t6, t3))
  return [t0, t1, t2, t7]

-----------------------------------------
-- not recursive
b59 :: forall (a :: *) (b :: *) (c :: *). [a, b, Word, c, Word] >>= [a, b, Word, c]
b59[t0, t1, t2, t3, t4] =
  t5 <- add((t4, -64))
  t6 <- shl((1, t5))
  t7 <- xor((t6, t2))
  return [t0, t1, t7, t3]

-----------------------------------------
-- not recursive
b61 :: forall (a :: *) (b :: *). [a, b, Word, Word, Word] >>= [a, b, Word, Word]
b61[t0, t1, t2, t3, t4] =
  t5 <- primUlt((t4, 96))
  if t5
    then b59[t0, t1, t2, t3, t4]
    else b60[t0, t1, t2, t3, t4]

-----------------------------------------
-- not recursive
b57 :: forall (a :: *) (b :: *) (c :: *). [a, Word, b, c, Word] >>= [a, Word, b, c]
b57[t0, t1, t2, t3, t4] =
  t5 <- add((t4, -32))
  t6 <- shl((1, t5))
  t7 <- xor((t6, t1))
  return [t0, t7, t2, t3]

-----------------------------------------
-- not recursive
b56 :: forall (a :: *) (b :: *) (c :: *). [Word, a, b, c, Word] >>= [Word, a, b, c]
b56[t0, t1, t2, t3, t4] =
  t5 <- shl((1, t4))
  t6 <- xor((t5, t0))
  return [t6, t1, t2, t3]

-----------------------------------------
-- not recursive
b58 :: forall (a :: *) (b :: *). [Word, Word, a, b, Word] >>= [Word, Word, a, b]
b58[t0, t1, t2, t3, t4] =
  t5 <- primUlt((t4, 32))
  if t5
    then b56[t0, t1, t2, t3, t4]
    else b57[t0, t1, t2, t3, t4]

-----------------------------------------
-- not recursive
entrypoint bitFlipBit128 :: [Word, Word, Word, Word, Word] >>= [Word, Word, Word, Word]
bitFlipBit128[t0, t1, t2, t3, t4] =
  t5 <- primUlt((t4, 64))
  if t5
    then b58[t0, t1, t2, t3, t4]
    else b61[t0, t1, t2, t3, t4]

-----------------------------------------
-- not recursive
entrypoint bitTestBit2 :: [Word, Word] >>= [Flag]
bitTestBit2[t0, t1] =
  t2 <- shl((1, t1))
  t3 <- and((t2, t0))
  primNeq((t3, 0))

-----------------------------------------
-- not recursive
entrypoint bitTestBit12 :: [Word, Word] >>= [Flag]
bitTestBit12[t0, t1] =
  t2 <- shl((1, t1))
  t3 <- and((t2, t0))
  primNeq((t3, 0))

-----------------------------------------
-- not recursive
b66 :: [Word, Word] >>= [Flag]
b66[t0, t1] =
  t2 <- add((t1, -32))
  t3 <- shl((1, t2))
  t4 <- and((t3, t0))
  primNeq((t4, 0))

-----------------------------------------
-- not recursive
entrypoint bitTestBit48 :: [Word, Word, Word] >>= [Flag]
bitTestBit48[t0, t1, t2] =
  t3 <- primUlt((t2, 32))
  if t3
    then bitTestBit2[t0, t2]
    else b66[t1, t2]

-----------------------------------------
-- not recursive
entrypoint bitTestBit64 :: [Word, Word, Word] >>= [Flag]
bitTestBit64[t0, t1, t2] =
  t3 <- primUlt((t2, 32))
  if t3
    then bitTestBit2[t0, t2]
    else b66[t1, t2]

-----------------------------------------
-- not recursive
b75 :: [Word, Word] >>= [Flag]
b75[t0, t1] =
  t2 <- add((t1, -96))
  t3 <- shl((1, t2))
  t4 <- and((t3, t0))
  primNeq((t4, 0))

-----------------------------------------
-- not recursive
b74 :: [Word, Word] >>= [Flag]
b74[t0, t1] =
  t2 <- add((t1, -64))
  t3 <- shl((1, t2))
  t4 <- and((t3, t0))
  primNeq((t4, 0))

-----------------------------------------
-- not recursive
b76 :: [Word, Word, Word] >>= [Flag]
b76[t0, t1, t2] =
  t3 <- primUlt((t2, 96))
  if t3
    then b74[t0, t2]
    else b75[t1, t2]

-----------------------------------------
-- not recursive
entrypoint bitTestBit128 :: [Word, Word, Word, Word, Word] >>= [Flag]
bitTestBit128[t0, t1, t2, t3, t4] =
  t5 <- primUlt((t4, 64))
  if t5
    then bitTestBit48[t0, t1, t4]
    else b76[t2, t3, t4]

-----------------------------------------
-- not recursive
entrypoint bitBitSize1 :: [Flag] >>= [Word]
bitBitSize1[t0] =
  return 0

-----------------------------------------
-- not recursive
entrypoint bitBitSize2 :: [Word] >>= [Word]
bitBitSize2[t0] =
  return 1

-----------------------------------------
-- not recursive
entrypoint bitBitSize12 :: [Word] >>= [Word]
bitBitSize12[t0] =
  return 11

-----------------------------------------
-- not recursive
entrypoint bitBitSize48 :: [Word, Word] >>= [Word]
bitBitSize48[t0, t1] =
  return 47

-----------------------------------------
-- not recursive
entrypoint bitBitSize64 :: [Word, Word] >>= [Word]
bitBitSize64[t0, t1] =
  return 63

-----------------------------------------
-- not recursive
entrypoint bitBitSize128 :: [Word, Word, Word, Word] >>= [Word]
bitBitSize128[t0, t1, t2, t3] =
  return 127

-----------------------------------------
-- Entrypoints: bitBit2 bitBit12 bitBit48 bitBit64 bitBit128 bitSetBit2 bitSetBit12 bitSetBit48 bitSetBit64 bitSetBit128 bitClearBit2 bitClearBit12 bitClearBit48 bitClearBit64 bitClearBit128 bitFlipBit2 bitFlipBit12 bitFlipBit48 bitFlipBit64 bitFlipBit128 bitTestBit2 bitTestBit12 bitTestBit48 bitTestBit64 bitTestBit128 bitBitSize1 bitBitSize2 bitBitSize12 bitBitSize48 bitBitSize64 bitBitSize128
