data NF (a :: *)
  = Z
  | S a

data Fix (a :: * -> *)
  = In (a (Fix a))

-----------------------------------------
-- not recursive
Z :: forall (a :: *). NF a
Z <-
  Z()

-----------------------------------------
-- not recursive
s1 :: Fix NF
s1 <-
  In(Z)

-----------------------------------------
-- not recursive
s2 :: NF (Fix NF)
s2 <-
  S(s1)

-----------------------------------------
-- not recursive
s3 :: Fix NF
s3 <-
  In(s2)

-----------------------------------------
-- not recursive
s4 :: NF (Fix NF)
s4 <-
  S(s3)

-----------------------------------------
-- not recursive
entrypoint two :: Fix NF
two <-
  In(s4)

-----------------------------------------
-- not recursive
k5 :: forall (f :: * -> *). {} [Fix f] ->> [f (Fix f)]
k5{} t0 = In 0 t0

-----------------------------------------
-- not recursive
entrypoint un :: forall (f :: * -> *). [Fix f] ->> [f (Fix f)]
un <-
  k5{}

-----------------------------------------
-- not recursive
b14 :: forall (a :: *) (b :: *) (c :: *). [[a] ->> [[b] ->> [c]], [a] ->> [b], a] >>= [c]
b14[t0, t1, t2] =
  t3 <- t0 @ t2
  t4 <- t1 @ t2
  t3 @ t4

-----------------------------------------
-- not recursive
k7 :: forall (a :: *) (b :: *) (c :: *). {[a] ->> [b], [a] ->> [[b] ->> [c]]} [a] ->> [c]
k7{t0, t1} t2 = b14[t1, t0, t2]

-----------------------------------------
-- not recursive
k8 :: forall (a :: *) (b :: *) (c :: *). {[a] ->> [[b] ->> [c]]} [[a] ->> [b]] ->> [[a] ->> [c]]
k8{t0} t1 = k7{t1, t0}

-----------------------------------------
-- not recursive
k9 :: forall (a :: *) (b :: *) (c :: *). {} [[a] ->> [[b] ->> [c]]] ->> [[[a] ->> [b]] ->> [[a] ->> [c]]]
k9{} t0 = k8{t0}

-----------------------------------------
-- not recursive
entrypoint subst :: forall (a :: *) (b :: *) (c :: *). [[a] ->> [[b] ->> [c]]] ->> [[[a] ->> [b]] ->> [[a] ->> [c]]]
subst <-
  k9{}

-----------------------------------------
-- not recursive
k10 :: forall (a :: *) (b :: *). {a} [b] ->> [a]
k10{t0} t1 = return t0

-----------------------------------------
-- not recursive
k11 :: forall (a :: *) (b :: *). {} [a] ->> [[b] ->> [a]]
k11{} t0 = k10{t0}

-----------------------------------------
-- not recursive
entrypoint const :: forall (a :: *) (b :: *). [a] ->> [[b] ->> [a]]
const <-
  k11{}

-----------------------------------------
-- not recursive
k6 :: forall (a :: *). {} [a] ->> [a]
k6{} t0 = return t0

-----------------------------------------
-- not recursive
entrypoint id :: forall (a :: *). [a] ->> [a]
id <-
  k6{}

-----------------------------------------
-- Entrypoints: two un subst const id
