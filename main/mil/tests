exec: masktestexamples   ./milc -m -pcosoboro masktestexamples.mil

exec: importchasing      ./milc -m -pco -v comb.mil

-------
.mil: no-entrypoint       ./milc -m
-- This program should give an error because there
-- are no defined entrypoints:
v <- return 42

-------
.mil: top-level-atom    ./milc -m
-- A minimal top level definition.
entrypoint v
v <- return 42

-------
.mil: top-level-prim    ./milc -m -p
require "basic.mil"
entrypoint v
v <- mul((6, 7))

-------
.mil: top-level-prim-opt  ./milc -m -po
require "basic.mil"
entrypoint v
v <- mul((6, 7))

-------
.mil: unoptimized-to-llvm ./milc -l -pcsr
-- An example to check that the LLVM code generator can handle
-- unoptimized MIL code
entrypoint b
b[] = y <- return 2
      return y

-------
.mil: area-as-entrypoint  ./milc -l --llvm-main=main
entrypoint vram

vram <- area (Stored (Bit 32)) init
        aligned 2048

external init :: Init (Stored (Bit 32))

-------
.mil: area-as-entrypoint-init-clash  ./milc -l --llvm-main=main
entrypoint vram

vram <- area (Stored (Bit 32)) init
        aligned 2048

entrypoint init -- cannot have init as both an external and an entrypoint
external init :: Init (Stored (Bit 32))

-------
.mil: entrypoint-primitive-clash  ./milc -l --llvm-main=main
entrypoint foo
external foo :: Word -> Word

-------
.mil: entrypoint-primitive-safe  ./milc -l --llvm-main=main
external foo :: Word -> Word

entrypoint bar
bar <- return foo

-------
.mil: toplevel-as-entrypoint  ./milc -l --llvm-main=main
entrypoint verily, nay

verily <- primEq((0,0))
nay    <- primEq((0,1))

-------
