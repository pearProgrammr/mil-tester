exec: export-test1   ./milc -m -pcosboro export-test.lc

.lc: do-parsing      ./milc
-- An earlier version of the parser rejected one of the following
-- but should have accepted both; we memorialize the example here
-- to prevent us from reintroducing that parser bug.
entrypoint foo
foo c d e
   = do x <- do y <- c;
                d;         -- remove this semicolon
        e

entrypoint bar
bar c d e
   = do x <- do y <- c;
                d          -- semicolon removed!
        e

.lc: opt-example   ./milc -pcosboro -m
-- A simple example to demonstrate the optimizer's ability to
-- generate efficient implementations for code that is expressed
-- using higher order functions.
require "prelude.lc"
  
compose f g x = f (g x)
succ x        = add x 1
double x      = add x x

entrypoint toOdd
toOdd = compose succ double

.lc: newtype-examples  ./milc -pcosboro -m
-- Some examples using newtypes
data T = MkT Word
data S = MkS (T -> T)
data U = MkU (S -> T)

entrypoint t
t z = MkT z

entrypoint s
s x = MkS x

entrypoint u
u y = MkU y

------------
.lc: lift           ./milc -pco -m
require "prelude.lc"

entrypoint f
f = \x -> let g = \y -> add x y
          in g x

entrypoint h
h = \x -> let p = \y -> add y (q x)
              q = \z -> p z
          in Pair p q

entrypoint j
j = \x -> let p = \y -> add y (q x)
              q = \z -> p (r z)
              r = \w -> add w w
          in Pair p q

entrypoint k
k = \x y z -> let u = \x y s -> v x s y
                  v = \a b c -> u x c y
                  w = \a -> u (t a) a a
                  t = \a -> w (add a a)
              in t

entrypoint l
l = \x y z -> let u = \x y s -> v x s y
                  v = \a b c -> u x c y
              in let
                  w = \a -> u (t a) a a
                  t = \a -> w (add a a)
              in t

entrypoint m
m = \x y -> let g = \z -> add x (h z)
                h = \z -> sub y (g z)
            in h

data EntryPoints a b c d e f = EntryPoints a b c d e f
main = EntryPoints f h j k l m
entrypoint main

------------
